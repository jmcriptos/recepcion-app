"""Add OCR processing log table

Revision ID: 002_ocr_log
Revises: 001_initial
Create Date: 2025-08-21 15:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '002_ocr_log'
down_revision = '001_initial'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create ocr_processing_logs table
    op.create_table('ocr_processing_logs',
        sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('registration_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('extracted_text', sa.Text(), nullable=False),
        sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=False),
        sa.Column('processing_time_ms', sa.Integer(), nullable=False),
        sa.Column('ocr_engine', sa.String(length=20), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.CheckConstraint("ocr_engine IN ('tesseract', 'google_vision')", name='check_ocr_engine_valid'),
        sa.ForeignKeyConstraint(['registration_id'], ['weight_registrations.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create indexes for performance optimization
    op.create_index('idx_ocr_logs_registration', 'ocr_processing_logs', ['registration_id'], unique=False)
    op.create_index('idx_ocr_logs_created_at', 'ocr_processing_logs', ['created_at'], unique=False)
    op.create_index('idx_ocr_logs_engine', 'ocr_processing_logs', ['ocr_engine'], unique=False)
    
    # Add ocr_confidence column to weight_registrations table if it doesn't exist
    # (This should already exist from the initial migration, but adding for completeness)
    op.add_column('weight_registrations', sa.Column('ocr_confidence', sa.DECIMAL(precision=3, scale=2), nullable=True))
    op.add_column('weight_registrations', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('weight_registrations', sa.Column('deleted_at', sa.DateTime(), nullable=True))
    op.add_column('weight_registrations', sa.Column('updated_by', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('weight_registrations', sa.Column('update_reason', sa.String(length=255), nullable=True))
    
    # Add foreign key constraint for updated_by
    op.create_foreign_key('fk_weight_registrations_updated_by', 'weight_registrations', 'users', ['updated_by'], ['id'])
    
    # Add index for deleted_at (for soft delete queries)
    op.create_index('idx_registrations_deleted_at', 'weight_registrations', ['deleted_at'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop indexes
    op.drop_index('idx_registrations_deleted_at', table_name='weight_registrations')
    op.drop_index('idx_ocr_logs_engine', table_name='ocr_processing_logs')
    op.drop_index('idx_ocr_logs_created_at', table_name='ocr_processing_logs')
    op.drop_index('idx_ocr_logs_registration', table_name='ocr_processing_logs')
    
    # Drop foreign key constraint
    op.drop_constraint('fk_weight_registrations_updated_by', 'weight_registrations', type_='foreignkey')
    
    # Remove added columns from weight_registrations
    op.drop_column('weight_registrations', 'update_reason')
    op.drop_column('weight_registrations', 'updated_by')
    op.drop_column('weight_registrations', 'deleted_at')
    op.drop_column('weight_registrations', 'updated_at')
    op.drop_column('weight_registrations', 'ocr_confidence')
    
    # Drop OCR processing logs table
    op.drop_table('ocr_processing_logs')
    # ### end Alembic commands ###